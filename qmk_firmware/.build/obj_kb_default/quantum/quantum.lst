   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 7 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 7 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 8 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 8 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  48               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 15 3 view .LVU5
  50               		.loc 1 15 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 16 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 17 3 view .LVU8
  60               		.loc 1 17 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 18 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 19 3 view .LVU11
  70               		.loc 1 19 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 20 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 21 3 view .LVU14
  80               		.loc 1 21 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 22 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 24 3 view .LVU17
  90               		.loc 1 24 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 27 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 29 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 31 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 33 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  34:quantum/quantum.c **** }
 117               		.loc 1 34 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 34 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 33 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 34 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 34 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 34 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE107:
 143               		.section	.text.register_code16,"ax",@progbits
 144               	.global	register_code16
 146               	register_code16:
 147               	.LVL14:
 148               	.LFB108:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 149               		.loc 1 36 38 is_stmt 1 view -0
 150               		.cfi_startproc
 151               		.loc 1 36 38 is_stmt 0 view .LVU34
 152 0000 CF93      		push r28
 153               	.LCFI4:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 1 */
 159               	.L__stack_usage = 1
 160 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 161               		.loc 1 37 3 is_stmt 1 view .LVU35
 162 0004 60E0      		ldi r22,lo8(gs(register_code))
 163 0006 70E0      		ldi r23,hi8(gs(register_code))
 164 0008 0E94 0000 		call do_code16
 165               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 166               		.loc 1 38 3 view .LVU36
 167 000c 8C2F      		mov r24,r28
 168               	/* epilogue start */
  39:quantum/quantum.c **** }
 169               		.loc 1 39 1 is_stmt 0 view .LVU37
 170 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 171               		.loc 1 38 3 view .LVU38
 172 0010 0C94 0000 		jmp register_code
 173               	.LVL16:
 174               		.cfi_endproc
 175               	.LFE108:
 177               		.section	.text.unregister_code16,"ax",@progbits
 178               	.global	unregister_code16
 180               	unregister_code16:
 181               	.LVL17:
 182               	.LFB109:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 183               		.loc 1 41 40 is_stmt 1 view -0
 184               		.cfi_startproc
 185               		.loc 1 41 40 is_stmt 0 view .LVU40
 186 0000 CF93      		push r28
 187               	.LCFI5:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 28, -2
 190 0002 DF93      		push r29
 191               	.LCFI6:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 29, -3
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 2 */
 197               	.L__stack_usage = 2
 198 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 199               		.loc 1 42 3 is_stmt 1 view .LVU41
 200 0006 0E94 0000 		call unregister_code
 201               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 202               		.loc 1 43 3 view .LVU42
 203 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 204 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 205 000e CE01      		movw r24,r28
 206               	/* epilogue start */
  44:quantum/quantum.c **** }
 207               		.loc 1 44 1 is_stmt 0 view .LVU43
 208 0010 DF91      		pop r29
 209 0012 CF91      		pop r28
 210               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 211               		.loc 1 43 3 view .LVU44
 212 0014 0C94 0000 		jmp do_code16
 213               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 214               		.loc 1 43 3 view .LVU45
 215               		.cfi_endproc
 216               	.LFE109:
 218               		.section	.text.process_action_kb,"ax",@progbits
 219               		.weak	process_action_kb
 221               	process_action_kb:
 222               	.LVL21:
 223               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 224               		.loc 1 47 45 is_stmt 1 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 230               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 231               		.loc 1 49 1 is_stmt 0 view .LVU48
 232 0000 81E0      		ldi r24,lo8(1)
 233               	.LVL22:
 234               	/* epilogue start */
 235               		.loc 1 49 1 view .LVU49
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE110:
 240               		.section	.text.process_record_user,"ax",@progbits
 241               		.weak	process_record_user
 243               	process_record_user:
 244               	.LVL23:
 245               	.LFB112:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 246               		.loc 1 57 65 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 252               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 253               		.loc 1 59 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL24:
 256               	/* epilogue start */
 257               		.loc 1 59 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE112:
 262               		.section	.text.process_record_kb,"ax",@progbits
 263               		.weak	process_record_kb
 265               	process_record_kb:
 266               	.LVL25:
 267               	.LFB111:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 268               		.loc 1 52 63 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 274               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 10 is_stmt 0 view .LVU56
 276 0000 0C94 0000 		jmp process_record_user
 277               	.LVL26:
  53:quantum/quantum.c **** }
 278               		.loc 1 53 10 view .LVU57
 279               		.cfi_endproc
 280               	.LFE111:
 282               		.section	.text.reset_keyboard,"ax",@progbits
 283               	.global	reset_keyboard
 285               	reset_keyboard:
 286               	.LFB113:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 287               		.loc 1 61 27 is_stmt 1 view -0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 293               		.loc 1 62 3 view .LVU59
 294 0000 0E94 0000 		call clear_keyboard
 295               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 296               		.loc 1 67 3 view .LVU60
 297               	.LBB4:
 298               	.LBI4:
 299               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 300               		.loc 2 166 1 view .LVU61
 301               	.LBB5:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 302               		.loc 2 168 2 view .LVU62
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 303               		.loc 2 172 2 view .LVU63
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 304               		.loc 2 173 2 view .LVU64
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 305               		.loc 2 174 2 view .LVU65
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 306               		.loc 2 184 3 view .LVU66
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 307               		.loc 2 187 2 view .LVU67
 308 0004 2FEF      		ldi r18,lo8(799999)
 309 0006 84E3      		ldi r24,hi8(799999)
 310 0008 9CE0      		ldi r25,hlo8(799999)
 311 000a 2150      	1:	subi r18,1
 312 000c 8040      		sbci r24,0
 313 000e 9040      		sbci r25,0
 314 0010 01F4      		brne 1b
 315 0012 00C0      		rjmp .
 316 0014 0000      		nop
 317               	.LVL28:
 318               		.loc 2 187 2 is_stmt 0 view .LVU68
 319               	.LBE5:
 320               	.LBE4:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 321               		.loc 1 71 3 is_stmt 1 view .LVU69
 322 0016 0C94 0000 		jmp bootloader_jump
 323               	.LVL29:
 324               		.cfi_endproc
 325               	.LFE113:
 327               		.section	.text.process_record_quantum,"ax",@progbits
 328               	.global	process_record_quantum
 330               	process_record_quantum:
 331               	.LVL30:
 332               	.LFB114:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 333               		.loc 1 86 50 view -0
 334               		.cfi_startproc
 335               		.loc 1 86 50 is_stmt 0 view .LVU71
 336 0000 FF92      		push r15
 337               	.LCFI7:
 338               		.cfi_def_cfa_offset 3
 339               		.cfi_offset 15, -2
 340 0002 0F93      		push r16
 341               	.LCFI8:
 342               		.cfi_def_cfa_offset 4
 343               		.cfi_offset 16, -3
 344 0004 1F93      		push r17
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 5
 347               		.cfi_offset 17, -4
 348 0006 CF93      		push r28
 349               	.LCFI10:
 350               		.cfi_def_cfa_offset 6
 351               		.cfi_offset 28, -5
 352 0008 DF93      		push r29
 353               	.LCFI11:
 354               		.cfi_def_cfa_offset 7
 355               		.cfi_offset 29, -6
 356               	/* prologue: function */
 357               	/* frame size = 0 */
 358               	/* stack size = 5 */
 359               	.L__stack_usage = 5
 360 000a 8C01      		movw r16,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 361               		.loc 1 89 3 is_stmt 1 view .LVU72
 362               		.loc 1 89 12 is_stmt 0 view .LVU73
 363 000c FC01      		movw r30,r24
 364 000e C081      		ld r28,Z
 365 0010 D181      		ldd r29,Z+1
 366               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 367               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 368               		.loc 1 94 5 view .LVU75
 369               		.loc 1 94 8 is_stmt 0 view .LVU76
 370 0012 8091 0000 		lds r24,disable_action_cache
 371               	.LVL32:
 372               		.loc 1 94 8 view .LVU77
 373 0016 8111      		cpse r24,__zero_reg__
 374 0018 00C0      		rjmp .L28
 375               	.LBB6:
  95:quantum/quantum.c ****       uint8_t layer;
 376               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 377               		.loc 1 97 7 view .LVU79
 378               		.loc 1 97 10 is_stmt 0 view .LVU80
 379 001a 8281      		ldd r24,Z+2
 380 001c 8823      		tst r24
 381 001e 01F4      		brne .+2
 382 0020 00C0      		rjmp .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 383               		.loc 1 98 9 is_stmt 1 view .LVU81
 384               	.LVL33:
 385               		.loc 1 98 17 is_stmt 0 view .LVU82
 386 0022 CE01      		movw r24,r28
 387 0024 0E94 0000 		call layer_switch_get_layer
 388               	.LVL34:
 389 0028 F82E      		mov r15,r24
 390               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 391               		.loc 1 99 9 is_stmt 1 view .LVU83
 392 002a 682F      		mov r22,r24
 393 002c CE01      		movw r24,r28
 394 002e 0E94 0000 		call update_source_layers_cache
 395               	.LVL36:
 396               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 397               		.loc 1 103 7 view .LVU84
 398               		.loc 1 103 17 is_stmt 0 view .LVU85
 399 0032 BE01      		movw r22,r28
 400 0034 8F2D      		mov r24,r15
 401               	.LVL37:
 402               	.L120:
 403               		.loc 1 103 17 view .LVU86
 404               	.LBE6:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 405               		.loc 1 106 15 view .LVU87
 406 0036 0E94 0000 		call keymap_key_to_keycode
 407               	.LVL38:
 408 003a EC01      		movw r28,r24
 409               	.LVL39:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 410               		.loc 1 116 3 is_stmt 1 view .LVU88
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 411               		.loc 1 117 5 is_stmt 0 view .LVU89
 412 003c B801      		movw r22,r16
 413 003e 0E94 0000 		call process_record_kb
 414               	.LVL40:
 415               		.loc 1 117 40 view .LVU90
 416 0042 8823      		tst r24
 417 0044 01F4      		brne .+2
 418 0046 00C0      		rjmp .L27
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 419               		.loc 1 128 5 discriminator 2 view .LVU91
 420 0048 B801      		movw r22,r16
 421 004a CE01      		movw r24,r28
 422 004c 0E94 0000 		call process_leader
 423               	.LVL41:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 424               		.loc 1 117 40 discriminator 2 view .LVU92
 425 0050 8823      		tst r24
 426 0052 01F4      		brne .+2
 427 0054 00C0      		rjmp .L27
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 428               		.loc 1 151 3 is_stmt 1 view .LVU93
 429 0056 C633      		cpi r28,54
 430 0058 F0E7      		ldi r31,112
 431 005a DF07      		cpc r29,r31
 432 005c 01F4      		brne .+2
 433 005e 00C0      		rjmp .L35
 434 0060 00F4      		brsh .L36
 435 0062 C531      		cpi r28,21
 436 0064 90E7      		ldi r25,112
 437 0066 D907      		cpc r29,r25
 438 0068 00F4      		brsh .L37
 439 006a C230      		cpi r28,2
 440 006c E0E7      		ldi r30,112
 441 006e DE07      		cpc r29,r30
 442 0070 00F0      		brlo .+2
 443 0072 00C0      		rjmp .L38
 444 0074 C115      		cp r28,__zero_reg__
 445 0076 F0E7      		ldi r31,112
 446 0078 DF07      		cpc r29,r31
 447 007a 01F4      		brne .+2
 448 007c 00C0      		rjmp .L39
 449 007e C130      		cpi r28,1
 450 0080 D047      		sbci r29,112
 451 0082 01F4      		brne .+2
 452 0084 00C0      		rjmp .L40
 453               	.L41:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 454               		.loc 1 339 7 view .LVU94
 455               		.loc 1 339 28 is_stmt 0 view .LVU95
 456 0086 81E0      		ldi r24,lo8(1)
 457 0088 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 458               		.loc 1 340 7 is_stmt 1 view .LVU96
 459               		.loc 1 340 28 is_stmt 0 view .LVU97
 460 008c 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 461               		.loc 1 341 7 is_stmt 1 view .LVU98
 462               	.L52:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 463               		.loc 1 345 3 view .LVU99
 464               		.loc 1 345 10 is_stmt 0 view .LVU100
 465 0090 C801      		movw r24,r16
 466               	/* epilogue start */
 346:quantum/quantum.c **** }
 467               		.loc 1 346 1 view .LVU101
 468 0092 DF91      		pop r29
 469 0094 CF91      		pop r28
 470               	.LVL42:
 471               		.loc 1 346 1 view .LVU102
 472 0096 1F91      		pop r17
 473 0098 0F91      		pop r16
 474               	.LVL43:
 475               		.loc 1 346 1 view .LVU103
 476 009a FF90      		pop r15
 345:quantum/quantum.c **** }
 477               		.loc 1 345 10 view .LVU104
 478 009c 0C94 0000 		jmp process_action_kb
 479               	.LVL44:
 480               	.L29:
 481               	.LBB7:
 101:quantum/quantum.c ****       }
 482               		.loc 1 101 9 is_stmt 1 view .LVU105
 101:quantum/quantum.c ****       }
 483               		.loc 1 101 17 is_stmt 0 view .LVU106
 484 00a0 CE01      		movw r24,r28
 485 00a2 0E94 0000 		call read_source_layers_cache
 486               	.LVL45:
 487 00a6 F82E      		mov r15,r24
 488               	.LVL46:
 101:quantum/quantum.c ****       }
 489               		.loc 1 101 17 view .LVU107
 490 00a8 00C0      		rjmp .L30
 491               	.LVL47:
 492               	.L28:
 101:quantum/quantum.c ****       }
 493               		.loc 1 101 17 view .LVU108
 494               	.LBE7:
 106:quantum/quantum.c **** 
 495               		.loc 1 106 5 is_stmt 1 view .LVU109
 106:quantum/quantum.c **** 
 496               		.loc 1 106 37 is_stmt 0 view .LVU110
 497 00aa CE01      		movw r24,r28
 498 00ac 0E94 0000 		call layer_switch_get_layer
 499               	.LVL48:
 106:quantum/quantum.c **** 
 500               		.loc 1 106 15 view .LVU111
 501 00b0 BE01      		movw r22,r28
 502 00b2 00C0      		rjmp .L120
 503               	.LVL49:
 504               	.L37:
 106:quantum/quantum.c **** 
 505               		.loc 1 106 15 view .LVU112
 506 00b4 C433      		cpi r28,52
 507 00b6 90E7      		ldi r25,112
 508 00b8 D907      		cpc r29,r25
 509 00ba 01F4      		brne .+2
 510 00bc 00C0      		rjmp .L42
 511 00be C533      		cpi r28,53
 512 00c0 D047      		sbci r29,112
 513 00c2 01F4      		brne .L41
 171:quantum/quantum.c **** 	case RGB_MOD:
 514               		.loc 1 171 7 is_stmt 1 view .LVU113
 173:quantum/quantum.c **** 			rgblight_step();
 515               		.loc 1 173 3 view .LVU114
 173:quantum/quantum.c **** 			rgblight_step();
 516               		.loc 1 173 6 is_stmt 0 view .LVU115
 517 00c4 F801      		movw r30,r16
 518 00c6 8281      		ldd r24,Z+2
 519 00c8 8823      		tst r24
 520 00ca 01F0      		breq .L27
 174:quantum/quantum.c ****       }
 521               		.loc 1 174 4 is_stmt 1 view .LVU116
 522 00cc 0E94 0000 		call rgblight_step
 523               	.LVL50:
 524 00d0 00C0      		rjmp .L27
 525               	.L36:
 174:quantum/quantum.c ****       }
 526               		.loc 1 174 4 is_stmt 0 view .LVU117
 527 00d2 CA33      		cpi r28,58
 528 00d4 F0E7      		ldi r31,112
 529 00d6 DF07      		cpc r29,r31
 530 00d8 01F4      		brne .+2
 531 00da 00C0      		rjmp .L44
 532 00dc 00F4      		brsh .L45
 533 00de F801      		movw r30,r16
 534 00e0 8281      		ldd r24,Z+2
 535 00e2 C833      		cpi r28,56
 536 00e4 F0E7      		ldi r31,112
 537 00e6 DF07      		cpc r29,r31
 538 00e8 01F4      		brne .+2
 539 00ea 00C0      		rjmp .L46
 174:quantum/quantum.c ****       }
 540               		.loc 1 174 4 view .LVU118
 541 00ec 00F4      		brsh .+2
 542 00ee 00C0      		rjmp .L119
 195:quantum/quantum.c **** 	case RGB_SAD:
 543               		.loc 1 195 7 is_stmt 1 view .LVU119
 197:quantum/quantum.c **** 			rgblight_decrease_sat();
 544               		.loc 1 197 3 view .LVU120
 197:quantum/quantum.c **** 			rgblight_decrease_sat();
 545               		.loc 1 197 6 is_stmt 0 view .LVU121
 546 00f0 8823      		tst r24
 547 00f2 01F0      		breq .L27
 198:quantum/quantum.c ****       }
 548               		.loc 1 198 4 is_stmt 1 view .LVU122
 549 00f4 0E94 0000 		call rgblight_decrease_sat
 550               	.LVL51:
 551 00f8 00C0      		rjmp .L27
 552               	.L45:
 198:quantum/quantum.c ****       }
 553               		.loc 1 198 4 is_stmt 0 view .LVU123
 554 00fa CC33      		cpi r28,60
 555 00fc E0E7      		ldi r30,112
 556 00fe DE07      		cpc r29,r30
 557 0100 01F4      		brne .+2
 558 0102 00C0      		rjmp .L49
 559 0104 00F4      		brsh .+2
 560 0106 00C0      		rjmp .L50
 561 0108 CD33      		cpi r28,61
 562 010a D047      		sbci r29,112
 563 010c 01F0      		breq .+2
 564 010e 00C0      		rjmp .L41
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 565               		.loc 1 317 7 is_stmt 1 view .LVU124
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 566               		.loc 1 317 24 is_stmt 0 view .LVU125
 567 0110 F801      		movw r30,r16
 568 0112 8281      		ldd r24,Z+2
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 569               		.loc 1 317 10 view .LVU126
 570 0114 8823      		tst r24
 571 0116 01F4      		brne .+2
 572 0118 00C0      		rjmp .L79
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 573               		.loc 1 318 9 is_stmt 1 view .LVU127
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 574               		.loc 1 318 30 is_stmt 0 view .LVU128
 575 011a 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576               		.loc 1 319 9 is_stmt 1 view .LVU129
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 577               		.loc 1 319 21 is_stmt 0 view .LVU130
 578 011e 0E94 0000 		call timer_read
 579               	.LVL52:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 580               		.loc 1 319 19 view .LVU131
 581 0122 9093 0000 		sts scs_timer+1,r25
 582 0126 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 583               		.loc 1 320 9 is_stmt 1 view .LVU132
 584 012a 80E2      		ldi r24,lo8(32)
 585 012c 00C0      		rjmp .L122
 586               	.L39:
 153:quantum/quantum.c ****         reset_keyboard();
 587               		.loc 1 153 7 view .LVU133
 153:quantum/quantum.c ****         reset_keyboard();
 588               		.loc 1 153 10 is_stmt 0 view .LVU134
 589 012e F801      		movw r30,r16
 590 0130 8281      		ldd r24,Z+2
 591 0132 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 592               		.loc 1 154 9 is_stmt 1 view .LVU135
 593 0134 0E94 0000 		call reset_keyboard
 594               	.LVL53:
 595               	.L27:
 596               		.loc 1 346 1 is_stmt 0 view .LVU136
 597 0138 80E0      		ldi r24,0
 598               	/* epilogue start */
 599 013a DF91      		pop r29
 600 013c CF91      		pop r28
 601               	.LVL54:
 602               		.loc 1 346 1 view .LVU137
 603 013e 1F91      		pop r17
 604 0140 0F91      		pop r16
 605               	.LVL55:
 606               		.loc 1 346 1 view .LVU138
 607 0142 FF90      		pop r15
 608 0144 0895      		ret
 609               	.LVL56:
 610               	.L40:
 157:quantum/quantum.c ****     case DEBUG:
 611               		.loc 1 157 7 is_stmt 1 view .LVU139
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 612               		.loc 1 159 7 view .LVU140
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 613               		.loc 1 159 10 is_stmt 0 view .LVU141
 614 0146 F801      		movw r30,r16
 615 0148 8281      		ldd r24,Z+2
 616 014a 8823      		tst r24
 617 014c 01F0      		breq .L27
 160:quantum/quantum.c ****           debug_enable = true;
 618               		.loc 1 160 39 is_stmt 1 view .LVU142
 161:quantum/quantum.c ****       }
 619               		.loc 1 161 11 view .LVU143
 161:quantum/quantum.c ****       }
 620               		.loc 1 161 24 is_stmt 0 view .LVU144
 621 014e 8091 0000 		lds r24,debug_config
 622 0152 8160      		ori r24,lo8(1<<0)
 623 0154 8093 0000 		sts debug_config,r24
 624 0158 00C0      		rjmp .L27
 625               	.L42:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 626               		.loc 1 164 7 is_stmt 1 view .LVU145
 167:quantum/quantum.c **** 			rgblight_toggle();
 627               		.loc 1 167 3 view .LVU146
 167:quantum/quantum.c **** 			rgblight_toggle();
 628               		.loc 1 167 6 is_stmt 0 view .LVU147
 629 015a F801      		movw r30,r16
 630 015c 8281      		ldd r24,Z+2
 631 015e 8823      		tst r24
 632 0160 01F0      		breq .L27
 168:quantum/quantum.c ****       }
 633               		.loc 1 168 4 is_stmt 1 view .LVU148
 634 0162 0E94 0000 		call rgblight_toggle
 635               	.LVL57:
 636 0166 00C0      		rjmp .L27
 637               	.L35:
 177:quantum/quantum.c **** 	case RGB_HUI:
 638               		.loc 1 177 7 view .LVU149
 179:quantum/quantum.c **** 			rgblight_increase_hue();
 639               		.loc 1 179 3 view .LVU150
 179:quantum/quantum.c **** 			rgblight_increase_hue();
 640               		.loc 1 179 6 is_stmt 0 view .LVU151
 641 0168 F801      		movw r30,r16
 642 016a 8281      		ldd r24,Z+2
 643 016c 8823      		tst r24
 644 016e 01F0      		breq .L27
 180:quantum/quantum.c ****       }
 645               		.loc 1 180 4 is_stmt 1 view .LVU152
 646 0170 0E94 0000 		call rgblight_increase_hue
 647               	.LVL58:
 648 0174 00C0      		rjmp .L27
 649               	.L119:
 183:quantum/quantum.c **** 	case RGB_HUD:
 650               		.loc 1 183 7 view .LVU153
 185:quantum/quantum.c **** 			rgblight_decrease_hue();
 651               		.loc 1 185 3 view .LVU154
 185:quantum/quantum.c **** 			rgblight_decrease_hue();
 652               		.loc 1 185 6 is_stmt 0 view .LVU155
 653 0176 8823      		tst r24
 654 0178 01F0      		breq .L27
 186:quantum/quantum.c ****       }
 655               		.loc 1 186 4 is_stmt 1 view .LVU156
 656 017a 0E94 0000 		call rgblight_decrease_hue
 657               	.LVL59:
 658 017e 00C0      		rjmp .L27
 659               	.L46:
 189:quantum/quantum.c **** 	case RGB_SAI:
 660               		.loc 1 189 7 view .LVU157
 191:quantum/quantum.c **** 			rgblight_increase_sat();
 661               		.loc 1 191 3 view .LVU158
 191:quantum/quantum.c **** 			rgblight_increase_sat();
 662               		.loc 1 191 6 is_stmt 0 view .LVU159
 663 0180 8823      		tst r24
 664 0182 01F0      		breq .L27
 192:quantum/quantum.c ****       }
 665               		.loc 1 192 4 is_stmt 1 view .LVU160
 666 0184 0E94 0000 		call rgblight_increase_sat
 667               	.LVL60:
 668 0188 00C0      		rjmp .L27
 669               	.L44:
 201:quantum/quantum.c **** 	case RGB_VAI:
 670               		.loc 1 201 7 view .LVU161
 203:quantum/quantum.c **** 			rgblight_increase_val();
 671               		.loc 1 203 3 view .LVU162
 203:quantum/quantum.c **** 			rgblight_increase_val();
 672               		.loc 1 203 6 is_stmt 0 view .LVU163
 673 018a F801      		movw r30,r16
 674 018c 8281      		ldd r24,Z+2
 675 018e 8823      		tst r24
 676 0190 01F0      		breq .L27
 204:quantum/quantum.c ****       }
 677               		.loc 1 204 4 is_stmt 1 view .LVU164
 678 0192 0E94 0000 		call rgblight_increase_val
 679               	.LVL61:
 680 0196 00C0      		rjmp .L27
 681               	.L50:
 207:quantum/quantum.c **** 	case RGB_VAD:
 682               		.loc 1 207 7 view .LVU165
 209:quantum/quantum.c **** 			rgblight_decrease_val();
 683               		.loc 1 209 3 view .LVU166
 209:quantum/quantum.c **** 			rgblight_decrease_val();
 684               		.loc 1 209 6 is_stmt 0 view .LVU167
 685 0198 F801      		movw r30,r16
 686 019a 8281      		ldd r24,Z+2
 687 019c 8823      		tst r24
 688 019e 01F0      		breq .L27
 210:quantum/quantum.c ****       }
 689               		.loc 1 210 4 is_stmt 1 view .LVU168
 690 01a0 0E94 0000 		call rgblight_decrease_val
 691               	.LVL62:
 692 01a4 00C0      		rjmp .L27
 693               	.L38:
 213:quantum/quantum.c **** 	#endif
 694               		.loc 1 213 7 view .LVU169
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 695               		.loc 1 216 7 view .LVU170
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 696               		.loc 1 216 10 is_stmt 0 view .LVU171
 697 01a6 F801      		movw r30,r16
 698 01a8 8281      		ldd r24,Z+2
 699 01aa 8823      		tst r24
 700 01ac 01F4      		brne .+2
 701 01ae 00C0      		rjmp .L52
 218:quantum/quantum.c ****             eeconfig_init();
 702               		.loc 1 218 9 is_stmt 1 view .LVU172
 218:quantum/quantum.c ****             eeconfig_init();
 703               		.loc 1 218 14 is_stmt 0 view .LVU173
 704 01b0 0E94 0000 		call eeconfig_is_enabled
 705               	.LVL63:
 218:quantum/quantum.c ****             eeconfig_init();
 706               		.loc 1 218 12 view .LVU174
 707 01b4 8111      		cpse r24,__zero_reg__
 708 01b6 00C0      		rjmp .L53
 219:quantum/quantum.c ****         }
 709               		.loc 1 219 13 is_stmt 1 view .LVU175
 710 01b8 0E94 0000 		call eeconfig_init
 711               	.LVL64:
 712               	.L53:
 222:quantum/quantum.c ****         switch (keycode)
 713               		.loc 1 222 9 view .LVU176
 222:quantum/quantum.c ****         switch (keycode)
 714               		.loc 1 222 29 is_stmt 0 view .LVU177
 715 01bc 0E94 0000 		call eeconfig_read_keymap
 716               	.LVL65:
 717 01c0 90E0      		ldi r25,0
 718 01c2 9093 0000 		sts keymap_config+1,r25
 719 01c6 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 720               		.loc 1 223 9 is_stmt 1 view .LVU178
 721 01ca FE01      		movw r30,r28
 722 01cc E350      		subi r30,3
 723 01ce F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 724               		.loc 1 226 49 is_stmt 0 view .LVU179
 725 01d0 8091 0000 		lds r24,keymap_config
 726 01d4 8160      		ori r24,lo8(1<<0)
 727 01d6 E231      		cpi r30,18
 728 01d8 F105      		cpc r31,__zero_reg__
 729 01da 00F4      		brsh .L121
 730 01dc E050      		subi r30,lo8(-(gs(.L56)))
 731 01de F040      		sbci r31,hi8(-(gs(.L56)))
 732 01e0 0C94 0000 		jmp __tablejump2__
 733               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 734               		.p2align	1
 735               	.L56:
 736 0000 0000      		.word gs(.L73)
 737 0002 0000      		.word gs(.L72)
 738 0004 0000      		.word gs(.L71)
 739 0006 0000      		.word gs(.L70)
 740 0008 0000      		.word gs(.L69)
 741 000a 0000      		.word gs(.L68)
 742 000c 0000      		.word gs(.L67)
 743 000e 0000      		.word gs(.L66)
 744 0010 0000      		.word gs(.L65)
 745 0012 0000      		.word gs(.L64)
 746 0014 0000      		.word gs(.L63)
 747 0016 0000      		.word gs(.L62)
 748 0018 0000      		.word gs(.L61)
 749 001a 0000      		.word gs(.L60)
 750 001c 0000      		.word gs(.L59)
 751 001e 0000      		.word gs(.L58)
 752 0020 0000      		.word gs(.L57)
 753 0022 0000      		.word gs(.L55)
 754               		.section	.text.process_record_quantum
 755               	.L73:
 229:quantum/quantum.c ****             break;
 756               		.loc 1 229 13 is_stmt 1 view .LVU180
 229:quantum/quantum.c ****             break;
 757               		.loc 1 229 47 is_stmt 0 view .LVU181
 758 01e4 8091 0000 		lds r24,keymap_config
 759 01e8 8260      		ori r24,lo8(1<<1)
 760               	.L121:
 282:quantum/quantum.c ****             break;
 761               		.loc 1 282 32 view .LVU182
 762 01ea 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 763               		.loc 1 283 13 is_stmt 1 view .LVU183
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 764               		.loc 1 287 9 view .LVU184
 765 01ee 8091 0000 		lds r24,keymap_config
 766 01f2 0E94 0000 		call eeconfig_update_keymap
 767               	.LVL66:
 288:quantum/quantum.c **** 
 768               		.loc 1 288 9 view .LVU185
 769 01f6 0E94 0000 		call clear_keyboard
 770               	.LVL67:
 290:quantum/quantum.c ****       }
 771               		.loc 1 290 9 view .LVU186
 290:quantum/quantum.c ****       }
 772               		.loc 1 290 16 is_stmt 0 view .LVU187
 773 01fa 00C0      		rjmp .L27
 774               	.L72:
 232:quantum/quantum.c ****             break;
 775               		.loc 1 232 13 is_stmt 1 view .LVU188
 232:quantum/quantum.c ****             break;
 776               		.loc 1 232 42 is_stmt 0 view .LVU189
 777 01fc 8091 0000 		lds r24,keymap_config
 778 0200 8460      		ori r24,lo8(1<<2)
 779 0202 00C0      		rjmp .L121
 780               	.L71:
 235:quantum/quantum.c ****             break;
 781               		.loc 1 235 13 is_stmt 1 view .LVU190
 235:quantum/quantum.c ****             break;
 782               		.loc 1 235 42 is_stmt 0 view .LVU191
 783 0204 8091 0000 		lds r24,keymap_config
 784 0208 8860      		ori r24,lo8(1<<3)
 785 020a 00C0      		rjmp .L121
 786               	.L70:
 238:quantum/quantum.c ****             break;
 787               		.loc 1 238 13 is_stmt 1 view .LVU192
 238:quantum/quantum.c ****             break;
 788               		.loc 1 238 34 is_stmt 0 view .LVU193
 789 020c 8091 0000 		lds r24,keymap_config
 790 0210 8061      		ori r24,lo8(1<<4)
 791 0212 00C0      		rjmp .L121
 792               	.L69:
 241:quantum/quantum.c ****             break;
 793               		.loc 1 241 13 is_stmt 1 view .LVU194
 241:quantum/quantum.c ****             break;
 794               		.loc 1 241 42 is_stmt 0 view .LVU195
 795 0214 8091 0000 		lds r24,keymap_config
 796 0218 8062      		ori r24,lo8(1<<5)
 797 021a 00C0      		rjmp .L121
 798               	.L68:
 244:quantum/quantum.c ****             break;
 799               		.loc 1 244 13 is_stmt 1 view .LVU196
 244:quantum/quantum.c ****             break;
 800               		.loc 1 244 52 is_stmt 0 view .LVU197
 801 021c 8091 0000 		lds r24,keymap_config
 802 0220 8064      		ori r24,lo8(1<<6)
 803 0222 00C0      		rjmp .L121
 804               	.L67:
 247:quantum/quantum.c ****             break;
 805               		.loc 1 247 13 is_stmt 1 view .LVU198
 247:quantum/quantum.c ****             break;
 806               		.loc 1 247 32 is_stmt 0 view .LVU199
 807 0224 8091 0000 		lds r24,keymap_config
 808 0228 8068      		ori r24,lo8(1<<7)
 809 022a 00C0      		rjmp .L121
 810               	.L66:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 811               		.loc 1 250 13 is_stmt 1 view .LVU200
 251:quantum/quantum.c ****             break;
 812               		.loc 1 251 13 view .LVU201
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 813               		.loc 1 250 42 is_stmt 0 view .LVU202
 814 022c 8091 0000 		lds r24,keymap_config
 815 0230 8C60      		ori r24,lo8(12)
 816 0232 00C0      		rjmp .L121
 817               	.L65:
 254:quantum/quantum.c ****             break;
 818               		.loc 1 254 13 is_stmt 1 view .LVU203
 254:quantum/quantum.c ****             break;
 819               		.loc 1 254 49 is_stmt 0 view .LVU204
 820 0234 8091 0000 		lds r24,keymap_config
 821 0238 8E7F      		andi r24,lo8(~(1<<0))
 822 023a 00C0      		rjmp .L121
 823               	.L64:
 257:quantum/quantum.c ****             break;
 824               		.loc 1 257 13 is_stmt 1 view .LVU205
 257:quantum/quantum.c ****             break;
 825               		.loc 1 257 47 is_stmt 0 view .LVU206
 826 023c 8091 0000 		lds r24,keymap_config
 827 0240 8D7F      		andi r24,lo8(~(1<<1))
 828 0242 00C0      		rjmp .L121
 829               	.L63:
 260:quantum/quantum.c ****             break;
 830               		.loc 1 260 13 is_stmt 1 view .LVU207
 260:quantum/quantum.c ****             break;
 831               		.loc 1 260 42 is_stmt 0 view .LVU208
 832 0244 8091 0000 		lds r24,keymap_config
 833 0248 8B7F      		andi r24,lo8(~(1<<2))
 834 024a 00C0      		rjmp .L121
 835               	.L62:
 263:quantum/quantum.c ****             break;
 836               		.loc 1 263 13 is_stmt 1 view .LVU209
 263:quantum/quantum.c ****             break;
 837               		.loc 1 263 42 is_stmt 0 view .LVU210
 838 024c 8091 0000 		lds r24,keymap_config
 839 0250 877F      		andi r24,lo8(~(1<<3))
 840 0252 00C0      		rjmp .L121
 841               	.L61:
 266:quantum/quantum.c ****             break;
 842               		.loc 1 266 13 is_stmt 1 view .LVU211
 266:quantum/quantum.c ****             break;
 843               		.loc 1 266 34 is_stmt 0 view .LVU212
 844 0254 8091 0000 		lds r24,keymap_config
 845 0258 8F7E      		andi r24,lo8(~(1<<4))
 846 025a 00C0      		rjmp .L121
 847               	.L60:
 269:quantum/quantum.c ****             break;
 848               		.loc 1 269 13 is_stmt 1 view .LVU213
 269:quantum/quantum.c ****             break;
 849               		.loc 1 269 42 is_stmt 0 view .LVU214
 850 025c 8091 0000 		lds r24,keymap_config
 851 0260 8F7D      		andi r24,lo8(~(1<<5))
 852 0262 00C0      		rjmp .L121
 853               	.L59:
 272:quantum/quantum.c ****             break;
 854               		.loc 1 272 13 is_stmt 1 view .LVU215
 272:quantum/quantum.c ****             break;
 855               		.loc 1 272 52 is_stmt 0 view .LVU216
 856 0264 8091 0000 		lds r24,keymap_config
 857 0268 8F7B      		andi r24,lo8(~(1<<6))
 858 026a 00C0      		rjmp .L121
 859               	.L58:
 275:quantum/quantum.c ****             break;
 860               		.loc 1 275 13 is_stmt 1 view .LVU217
 275:quantum/quantum.c ****             break;
 861               		.loc 1 275 32 is_stmt 0 view .LVU218
 862 026c 8091 0000 		lds r24,keymap_config
 863 0270 8F77      		andi r24,lo8(~(1<<7))
 864 0272 00C0      		rjmp .L121
 865               	.L57:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 866               		.loc 1 278 13 is_stmt 1 view .LVU219
 279:quantum/quantum.c ****             break;
 867               		.loc 1 279 13 view .LVU220
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 868               		.loc 1 278 42 is_stmt 0 view .LVU221
 869 0274 8091 0000 		lds r24,keymap_config
 870 0278 837F      		andi r24,lo8(-13)
 871 027a 00C0      		rjmp .L121
 872               	.L55:
 282:quantum/quantum.c ****             break;
 873               		.loc 1 282 13 is_stmt 1 view .LVU222
 282:quantum/quantum.c ****             break;
 874               		.loc 1 282 48 is_stmt 0 view .LVU223
 875 027c 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 876               		.loc 1 282 32 view .LVU224
 877 0280 892F      		mov r24,r25
 878 0282 97FB      		bst r25,7
 879 0284 87F9      		bld r24,7
 880 0286 8058      		subi r24,0x80
 881 0288 00C0      		rjmp .L121
 882               	.L49:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 883               		.loc 1 294 7 is_stmt 1 view .LVU225
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 884               		.loc 1 294 24 is_stmt 0 view .LVU226
 885 028a F801      		movw r30,r16
 886 028c 8281      		ldd r24,Z+2
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 887               		.loc 1 294 10 view .LVU227
 888 028e 8823      		tst r24
 889 0290 01F0      		breq .L75
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 890               		.loc 1 295 9 is_stmt 1 view .LVU228
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 891               		.loc 1 295 30 is_stmt 0 view .LVU229
 892 0292 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 893               		.loc 1 296 9 is_stmt 1 view .LVU230
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 894               		.loc 1 296 21 is_stmt 0 view .LVU231
 895 0296 0E94 0000 		call timer_read
 896               	.LVL68:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 897               		.loc 1 296 19 view .LVU232
 898 029a 9093 0000 		sts scs_timer+1,r25
 899 029e 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 900               		.loc 1 297 9 is_stmt 1 view .LVU233
 901 02a2 82E0      		ldi r24,lo8(2)
 902               	.L122:
 320:quantum/quantum.c ****       }
 903               		.loc 1 320 9 is_stmt 0 view .LVU234
 904 02a4 0E94 0000 		call register_mods
 905               	.LVL69:
 906 02a8 00C0      		rjmp .L27
 907               	.L75:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 908               		.loc 1 306 9 is_stmt 1 view .LVU235
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 909               		.loc 1 306 12 is_stmt 0 view .LVU236
 910 02aa 8091 0000 		lds r24,shift_interrupted
 911 02ae 8111      		cpse r24,__zero_reg__
 912 02b0 00C0      		rjmp .L77
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 913               		.loc 1 306 38 discriminator 1 view .LVU237
 914 02b2 8091 0000 		lds r24,scs_timer
 915 02b6 9091 0000 		lds r25,scs_timer+1
 916 02ba 0E94 0000 		call timer_elapsed
 917               	.LVL70:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 918               		.loc 1 306 35 discriminator 1 view .LVU238
 919 02be 883C      		cpi r24,-56
 920 02c0 9105      		cpc r25,__zero_reg__
 921 02c2 00F4      		brsh .L77
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 922               		.loc 1 307 11 is_stmt 1 view .LVU239
 923 02c4 86E2      		ldi r24,lo8(38)
 924 02c6 0E94 0000 		call register_code
 925               	.LVL71:
 308:quantum/quantum.c ****         }
 926               		.loc 1 308 11 view .LVU240
 927 02ca 86E2      		ldi r24,lo8(38)
 928 02cc 0E94 0000 		call unregister_code
 929               	.LVL72:
 930               	.L77:
 310:quantum/quantum.c ****       }
 931               		.loc 1 310 9 view .LVU241
 932 02d0 82E0      		ldi r24,lo8(2)
 933               	.L123:
 333:quantum/quantum.c ****       }
 934               		.loc 1 333 9 is_stmt 0 view .LVU242
 935 02d2 0E94 0000 		call unregister_mods
 936               	.LVL73:
 937 02d6 00C0      		rjmp .L27
 938               	.L79:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 939               		.loc 1 329 9 is_stmt 1 view .LVU243
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 940               		.loc 1 329 12 is_stmt 0 view .LVU244
 941 02d8 8091 0000 		lds r24,shift_interrupted+1
 942 02dc 8111      		cpse r24,__zero_reg__
 943 02de 00C0      		rjmp .L81
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 944               		.loc 1 329 38 discriminator 1 view .LVU245
 945 02e0 8091 0000 		lds r24,scs_timer
 946 02e4 9091 0000 		lds r25,scs_timer+1
 947 02e8 0E94 0000 		call timer_elapsed
 948               	.LVL74:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 949               		.loc 1 329 35 discriminator 1 view .LVU246
 950 02ec 883C      		cpi r24,-56
 951 02ee 9105      		cpc r25,__zero_reg__
 952 02f0 00F4      		brsh .L81
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 953               		.loc 1 330 11 is_stmt 1 view .LVU247
 954 02f2 87E2      		ldi r24,lo8(39)
 955 02f4 0E94 0000 		call register_code
 956               	.LVL75:
 331:quantum/quantum.c ****         }
 957               		.loc 1 331 11 view .LVU248
 958 02f8 87E2      		ldi r24,lo8(39)
 959 02fa 0E94 0000 		call unregister_code
 960               	.LVL76:
 961               	.L81:
 333:quantum/quantum.c ****       }
 962               		.loc 1 333 9 view .LVU249
 963 02fe 80E2      		ldi r24,lo8(32)
 964 0300 00C0      		rjmp .L123
 965               		.cfi_endproc
 966               	.LFE114:
 968               		.section	.text.send_string,"ax",@progbits
 969               	.global	send_string
 971               	send_string:
 972               	.LVL77:
 973               	.LFB115:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 974               		.loc 1 430 35 view -0
 975               		.cfi_startproc
 976               		.loc 1 430 35 is_stmt 0 view .LVU251
 977 0000 0F93      		push r16
 978               	.LCFI12:
 979               		.cfi_def_cfa_offset 3
 980               		.cfi_offset 16, -2
 981 0002 1F93      		push r17
 982               	.LCFI13:
 983               		.cfi_def_cfa_offset 4
 984               		.cfi_offset 17, -3
 985 0004 CF93      		push r28
 986               	.LCFI14:
 987               		.cfi_def_cfa_offset 5
 988               		.cfi_offset 28, -4
 989               	/* prologue: function */
 990               	/* frame size = 0 */
 991               	/* stack size = 3 */
 992               	.L__stack_usage = 3
 993 0006 8C01      		movw r16,r24
 994               	.LVL78:
 995               	.L128:
 431:quantum/quantum.c ****     while (1) {
 996               		.loc 1 431 5 is_stmt 1 view .LVU252
 997               	.LBB8:
 432:quantum/quantum.c ****         uint8_t keycode;
 998               		.loc 1 432 9 view .LVU253
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 999               		.loc 1 433 9 view .LVU254
 1000               	.LBB9:
 1001               		.loc 1 433 30 view .LVU255
 1002               		.loc 1 433 30 view .LVU256
 1003               		.loc 1 433 30 view .LVU257
 1004 0008 F801      		movw r30,r16
 1005               	/* #APP */
 1006               	 ;  433 "quantum/quantum.c" 1
 1007 000a 2491      		lpm r18, Z
 1008               		
 1009               	 ;  0 "" 2
 1010               	.LVL79:
 1011               		.loc 1 433 30 view .LVU258
 1012               		.loc 1 433 30 is_stmt 0 view .LVU259
 1013               	/* #NOAPP */
 1014               	.LBE9:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 1015               		.loc 1 434 9 is_stmt 1 view .LVU260
 1016               		.loc 1 434 12 is_stmt 0 view .LVU261
 1017 000c 2223      		tst r18
 1018 000e 01F0      		breq .L124
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 1019               		.loc 1 435 9 is_stmt 1 view .LVU262
 1020               	.LBB10:
 1021               		.loc 1 435 19 view .LVU263
 1022 0010 30E0      		ldi r19,0
 1023               	.LVL80:
 1024               		.loc 1 435 19 view .LVU264
 1025               		.loc 1 435 19 view .LVU265
 1026 0012 F901      		movw r30,r18
 1027 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 1028 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 1029               	.LVL81:
 1030               		.loc 1 435 19 is_stmt 0 view .LVU266
 1031               	/* #APP */
 1032               	 ;  435 "quantum/quantum.c" 1
 1033 0018 C491      		lpm r28, Z
 1034               		
 1035               	 ;  0 "" 2
 1036               	.LVL82:
 1037               		.loc 1 435 19 is_stmt 1 view .LVU267
 1038               		.loc 1 435 19 is_stmt 0 view .LVU268
 1039               	/* #NOAPP */
 1040               	.LBE10:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 1041               		.loc 1 436 9 is_stmt 1 view .LVU269
 1042               	.LBB11:
 1043               		.loc 1 436 13 view .LVU270
 1044               		.loc 1 436 13 view .LVU271
 1045               		.loc 1 436 13 view .LVU272
 1046 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 1047 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 1048               	.LVL83:
 1049               		.loc 1 436 13 is_stmt 0 view .LVU273
 1050 001e F901      		movw r30,r18
 1051               	.LVL84:
 1052               		.loc 1 436 13 view .LVU274
 1053               	/* #APP */
 1054               	 ;  436 "quantum/quantum.c" 1
 1055 0020 2491      		lpm r18, Z
 1056               		
 1057               	 ;  0 "" 2
 1058               	.LVL85:
 1059               		.loc 1 436 13 is_stmt 1 view .LVU275
 1060               	/* #NOAPP */
 1061               	.LBE11:
 1062               		.loc 1 436 12 is_stmt 0 view .LVU276
 1063 0022 2223      		tst r18
 1064 0024 01F0      		breq .L126
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 1065               		.loc 1 437 13 is_stmt 1 view .LVU277
 1066 0026 81EE      		ldi r24,lo8(-31)
 1067 0028 0E94 0000 		call register_code
 1068               	.LVL86:
 438:quantum/quantum.c ****             register_code(keycode);
 1069               		.loc 1 438 13 view .LVU278
 1070 002c 8C2F      		mov r24,r28
 1071 002e 0E94 0000 		call register_code
 1072               	.LVL87:
 439:quantum/quantum.c ****             unregister_code(keycode);
 1073               		.loc 1 439 13 view .LVU279
 1074 0032 8C2F      		mov r24,r28
 1075 0034 0E94 0000 		call unregister_code
 1076               	.LVL88:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1077               		.loc 1 440 13 view .LVU280
 1078 0038 81EE      		ldi r24,lo8(-31)
 1079               	.L129:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 1080               		.loc 1 444 13 is_stmt 0 view .LVU281
 1081 003a 0E94 0000 		call unregister_code
 1082               	.LVL89:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 1083               		.loc 1 446 9 is_stmt 1 view .LVU282
 1084 003e 0F5F      		subi r16,-1
 1085 0040 1F4F      		sbci r17,-1
 1086               	.LVL90:
 1087               		.loc 1 446 9 is_stmt 0 view .LVU283
 1088               	.LBE8:
 431:quantum/quantum.c ****         uint8_t keycode;
 1089               		.loc 1 431 15 view .LVU284
 1090 0042 00C0      		rjmp .L128
 1091               	.LVL91:
 1092               	.L126:
 1093               	.LBB12:
 443:quantum/quantum.c ****             unregister_code(keycode);
 1094               		.loc 1 443 13 is_stmt 1 view .LVU285
 1095 0044 8C2F      		mov r24,r28
 1096 0046 0E94 0000 		call register_code
 1097               	.LVL92:
 444:quantum/quantum.c ****         }
 1098               		.loc 1 444 13 view .LVU286
 1099 004a 8C2F      		mov r24,r28
 1100 004c 00C0      		rjmp .L129
 1101               	.LVL93:
 1102               	.L124:
 1103               	/* epilogue start */
 444:quantum/quantum.c ****         }
 1104               		.loc 1 444 13 is_stmt 0 view .LVU287
 1105               	.LBE12:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 1106               		.loc 1 448 1 view .LVU288
 1107 004e CF91      		pop r28
 1108 0050 1F91      		pop r17
 1109 0052 0F91      		pop r16
 1110               	.LVL94:
 1111               		.loc 1 448 1 view .LVU289
 1112 0054 0895      		ret
 1113               		.cfi_endproc
 1114               	.LFE115:
 1116               		.section	.text.update_tri_layer,"ax",@progbits
 1117               	.global	update_tri_layer
 1119               	update_tri_layer:
 1120               	.LVL95:
 1121               	.LFB116:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1122               		.loc 1 450 71 is_stmt 1 view -0
 1123               		.cfi_startproc
 1124               		.loc 1 450 71 is_stmt 0 view .LVU291
 1125 0000 8F92      		push r8
 1126               	.LCFI15:
 1127               		.cfi_def_cfa_offset 3
 1128               		.cfi_offset 8, -2
 1129 0002 9F92      		push r9
 1130               	.LCFI16:
 1131               		.cfi_def_cfa_offset 4
 1132               		.cfi_offset 9, -3
 1133 0004 AF92      		push r10
 1134               	.LCFI17:
 1135               		.cfi_def_cfa_offset 5
 1136               		.cfi_offset 10, -4
 1137 0006 BF92      		push r11
 1138               	.LCFI18:
 1139               		.cfi_def_cfa_offset 6
 1140               		.cfi_offset 11, -5
 1141 0008 CF92      		push r12
 1142               	.LCFI19:
 1143               		.cfi_def_cfa_offset 7
 1144               		.cfi_offset 12, -6
 1145 000a DF92      		push r13
 1146               	.LCFI20:
 1147               		.cfi_def_cfa_offset 8
 1148               		.cfi_offset 13, -7
 1149 000c EF92      		push r14
 1150               	.LCFI21:
 1151               		.cfi_def_cfa_offset 9
 1152               		.cfi_offset 14, -8
 1153 000e FF92      		push r15
 1154               	.LCFI22:
 1155               		.cfi_def_cfa_offset 10
 1156               		.cfi_offset 15, -9
 1157 0010 0F93      		push r16
 1158               	.LCFI23:
 1159               		.cfi_def_cfa_offset 11
 1160               		.cfi_offset 16, -10
 1161 0012 1F93      		push r17
 1162               	.LCFI24:
 1163               		.cfi_def_cfa_offset 12
 1164               		.cfi_offset 17, -11
 1165               	/* prologue: function */
 1166               	/* frame size = 0 */
 1167               	/* stack size = 10 */
 1168               	.L__stack_usage = 10
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1169               		.loc 1 451 3 is_stmt 1 view .LVU292
 1170 0014 C12C      		mov r12,__zero_reg__
 1171 0016 D12C      		mov r13,__zero_reg__
 1172 0018 7601      		movw r14,r12
 1173 001a C394      		inc r12
 1174 001c 9701      		movw r18,r14
 1175 001e 8601      		movw r16,r12
 1176 0020 00C0      		rjmp 2f
 1177               		1:
 1178 0022 000F      		lsl r16
 1179 0024 111F      		rol r17
 1180 0026 221F      		rol r18
 1181 0028 331F      		rol r19
 1182               		2:
 1183 002a 6A95      		dec r22
 1184 002c 02F4      		brpl 1b
 1185 002e 4601      		movw r8,r12
 1186 0030 5701      		movw r10,r14
 1187 0032 00C0      		rjmp 2f
 1188               		1:
 1189 0034 880C      		lsl r8
 1190 0036 991C      		rol r9
 1191 0038 AA1C      		rol r10
 1192 003a BB1C      		rol r11
 1193               		2:
 1194 003c 8A95      		dec r24
 1195 003e 02F4      		brpl 1b
 1196 0040 D501      		movw r26,r10
 1197 0042 C401      		movw r24,r8
 1198               	.LVL96:
 1199               		.loc 1 451 3 is_stmt 0 view .LVU293
 1200 0044 802B      		or r24,r16
 1201 0046 912B      		or r25,r17
 1202 0048 A22B      		or r26,r18
 1203 004a B32B      		or r27,r19
 1204               		.loc 1 451 27 view .LVU294
 1205 004c 0091 0000 		lds r16,layer_state
 1206 0050 1091 0000 		lds r17,layer_state+1
 1207 0054 2091 0000 		lds r18,layer_state+2
 1208 0058 3091 0000 		lds r19,layer_state+3
 1209 005c 0823      		and r16,r24
 1210 005e 1923      		and r17,r25
 1211 0060 2A23      		and r18,r26
 1212 0062 3B23      		and r19,r27
 1213 0064 8017      		cp r24,r16
 1214 0066 9107      		cpc r25,r17
 1215 0068 A207      		cpc r26,r18
 1216 006a B307      		cpc r27,r19
 1217 006c 01F4      		brne .L131
 452:quantum/quantum.c ****     layer_on(layer3);
 1218               		.loc 1 452 5 is_stmt 1 view .LVU295
 1219 006e 842F      		mov r24,r20
 1220               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1221               		.loc 1 456 1 is_stmt 0 view .LVU296
 1222 0070 1F91      		pop r17
 1223 0072 0F91      		pop r16
 1224 0074 FF90      		pop r15
 1225 0076 EF90      		pop r14
 1226 0078 DF90      		pop r13
 1227 007a CF90      		pop r12
 1228 007c BF90      		pop r11
 1229 007e AF90      		pop r10
 1230 0080 9F90      		pop r9
 1231 0082 8F90      		pop r8
 452:quantum/quantum.c ****     layer_on(layer3);
 1232               		.loc 1 452 5 view .LVU297
 1233 0084 0C94 0000 		jmp layer_on
 1234               	.LVL97:
 1235               	.L131:
 454:quantum/quantum.c ****   }
 1236               		.loc 1 454 5 is_stmt 1 view .LVU298
 1237 0088 842F      		mov r24,r20
 1238               	/* epilogue start */
 1239               		.loc 1 456 1 is_stmt 0 view .LVU299
 1240 008a 1F91      		pop r17
 1241 008c 0F91      		pop r16
 1242 008e FF90      		pop r15
 1243 0090 EF90      		pop r14
 1244 0092 DF90      		pop r13
 1245 0094 CF90      		pop r12
 1246 0096 BF90      		pop r11
 1247 0098 AF90      		pop r10
 1248 009a 9F90      		pop r9
 1249 009c 8F90      		pop r8
 454:quantum/quantum.c ****   }
 1250               		.loc 1 454 5 view .LVU300
 1251 009e 0C94 0000 		jmp layer_off
 1252               	.LVL98:
 454:quantum/quantum.c ****   }
 1253               		.loc 1 454 5 view .LVU301
 1254               		.cfi_endproc
 1255               	.LFE116:
 1257               		.section	.text.tap_random_base64,"ax",@progbits
 1258               	.global	tap_random_base64
 1260               	tap_random_base64:
 1261               	.LFB117:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1262               		.loc 1 458 30 is_stmt 1 view -0
 1263               		.cfi_startproc
 1264 0000 CF93      		push r28
 1265               	.LCFI25:
 1266               		.cfi_def_cfa_offset 3
 1267               		.cfi_offset 28, -2
 1268 0002 DF93      		push r29
 1269               	.LCFI26:
 1270               		.cfi_def_cfa_offset 4
 1271               		.cfi_offset 29, -3
 1272               	/* prologue: function */
 1273               	/* frame size = 0 */
 1274               	/* stack size = 2 */
 1275               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1276               		.loc 1 460 5 view .LVU303
 1277               		.loc 1 460 20 is_stmt 0 view .LVU304
 1278 0004 46B5      		in r20,0x26
 1279               		.loc 1 460 28 view .LVU305
 1280 0006 2091 8400 		lds r18,132
 1281 000a 3091 8500 		lds r19,132+1
 1282               		.loc 1 460 36 view .LVU306
 1283 000e C091 9400 		lds r28,148
 1284 0012 D091 9500 		lds r29,148+1
 1285               		.loc 1 460 44 view .LVU307
 1286 0016 8091 BE00 		lds r24,190
 1287 001a 9091 BF00 		lds r25,190+1
 1288               		.loc 1 460 34 view .LVU308
 1289 001e C20F      		add r28,r18
 1290 0020 C40F      		add r28,r20
 1291               		.loc 1 460 42 view .LVU309
 1292 0022 C80F      		add r28,r24
 1293               		.loc 1 460 13 view .LVU310
 1294 0024 CF73      		andi r28,lo8(63)
 1295               	.LVL99:
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1296               		.loc 1 464 3 is_stmt 1 view .LVU311
 1297 0026 CE33      		cpi r28,lo8(62)
 1298 0028 00F4      		brsh .L133
 1299 002a C533      		cpi r28,lo8(53)
 1300 002c 00F4      		brsh .L134
 1301 002e CA31      		cpi r28,lo8(26)
 1302 0030 00F0      		brlo .L135
 1303 0032 C433      		cpi r28,lo8(52)
 1304 0034 00F4      		brsh .L140
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 467:quantum/quantum.c ****       register_code(key + KC_A);
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1305               		.loc 1 472 7 view .LVU312
 1306 0036 C651      		subi r28,lo8(-(-22))
 1307               	.LVL100:
 1308               	.L143:
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1309               		.loc 1 480 7 is_stmt 0 view .LVU313
 1310 0038 8C2F      		mov r24,r28
 1311 003a 0E94 0000 		call register_code
 1312               	.LVL101:
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1313               		.loc 1 481 7 is_stmt 1 view .LVU314
 1314 003e 8C2F      		mov r24,r28
 1315 0040 00C0      		rjmp .L141
 1316               	.LVL102:
 1317               	.L133:
 1318               		.loc 1 481 7 is_stmt 0 view .LVU315
 1319 0042 CE33      		cpi r28,lo8(62)
 1320 0044 01F0      		breq .L138
 1321 0046 CF33      		cpi r28,lo8(63)
 1322 0048 01F0      		breq .L139
 1323               	.L135:
 466:quantum/quantum.c ****       register_code(key + KC_A);
 1324               		.loc 1 466 7 is_stmt 1 view .LVU316
 1325 004a 81EE      		ldi r24,lo8(-31)
 1326 004c 0E94 0000 		call register_code
 1327               	.LVL103:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1328               		.loc 1 467 7 view .LVU317
 1329 0050 CC5F      		subi r28,lo8(-(4))
 1330               	.LVL104:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1331               		.loc 1 467 7 is_stmt 0 view .LVU318
 1332 0052 8C2F      		mov r24,r28
 1333 0054 0E94 0000 		call register_code
 1334               	.LVL105:
 468:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1335               		.loc 1 468 7 is_stmt 1 view .LVU319
 1336 0058 8C2F      		mov r24,r28
 1337               	.LVL106:
 1338               	.L142:
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 485:quantum/quantum.c ****       register_code(KC_EQL);
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1339               		.loc 1 486 7 is_stmt 0 view .LVU320
 1340 005a 0E94 0000 		call unregister_code
 1341               	.LVL107:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1342               		.loc 1 487 7 is_stmt 1 view .LVU321
 1343 005e 81EE      		ldi r24,lo8(-31)
 1344 0060 00C0      		rjmp .L141
 1345               	.LVL108:
 1346               	.L140:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1347               		.loc 1 476 7 view .LVU322
 1348 0062 87E2      		ldi r24,lo8(39)
 1349 0064 0E94 0000 		call register_code
 1350               	.LVL109:
 477:quantum/quantum.c ****       break;
 1351               		.loc 1 477 7 view .LVU323
 1352 0068 87E2      		ldi r24,lo8(39)
 1353               	.LVL110:
 1354               	.L141:
 1355               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1356               		.loc 1 494 1 is_stmt 0 view .LVU324
 1357 006a DF91      		pop r29
 1358 006c CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1359               		.loc 1 491 7 view .LVU325
 1360 006e 0C94 0000 		jmp unregister_code
 1361               	.LVL111:
 1362               	.L134:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1363               		.loc 1 480 7 is_stmt 1 view .LVU326
 1364 0072 C751      		subi r28,lo8(-(-23))
 1365               	.LVL112:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1366               		.loc 1 480 7 is_stmt 0 view .LVU327
 1367 0074 00C0      		rjmp .L143
 1368               	.LVL113:
 1369               	.L138:
 484:quantum/quantum.c ****       register_code(KC_EQL);
 1370               		.loc 1 484 7 is_stmt 1 view .LVU328
 1371 0076 81EE      		ldi r24,lo8(-31)
 1372 0078 0E94 0000 		call register_code
 1373               	.LVL114:
 485:quantum/quantum.c ****       unregister_code(KC_EQL);
 1374               		.loc 1 485 7 view .LVU329
 1375 007c 8EE2      		ldi r24,lo8(46)
 1376 007e 0E94 0000 		call register_code
 1377               	.LVL115:
 486:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1378               		.loc 1 486 7 view .LVU330
 1379 0082 8EE2      		ldi r24,lo8(46)
 1380 0084 00C0      		rjmp .L142
 1381               	.L139:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1382               		.loc 1 490 7 view .LVU331
 1383 0086 88E3      		ldi r24,lo8(56)
 1384 0088 0E94 0000 		call register_code
 1385               	.LVL116:
 491:quantum/quantum.c ****       break;
 1386               		.loc 1 491 7 view .LVU332
 1387 008c 88E3      		ldi r24,lo8(56)
 1388 008e 00C0      		rjmp .L141
 1389               		.cfi_endproc
 1390               	.LFE117:
 1392               		.section	.text.matrix_init_quantum,"ax",@progbits
 1393               	.global	matrix_init_quantum
 1395               	matrix_init_quantum:
 1396               	.LFB118:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1397               		.loc 1 496 28 view -0
 1398               		.cfi_startproc
 1399               	/* prologue: function */
 1400               	/* frame size = 0 */
 1401               	/* stack size = 0 */
 1402               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1403               		.loc 1 500 3 view .LVU334
 1404 0000 0C94 0000 		jmp matrix_init_kb
 1405               	.LVL117:
 1406               		.cfi_endproc
 1407               	.LFE118:
 1409               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1410               	.global	matrix_scan_quantum
 1412               	matrix_scan_quantum:
 1413               	.LFB119:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1414               		.loc 1 503 28 view -0
 1415               		.cfi_startproc
 1416               	/* prologue: function */
 1417               	/* frame size = 0 */
 1418               	/* stack size = 0 */
 1419               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1420               		.loc 1 511 3 view .LVU336
 1421 0000 0C94 0000 		jmp matrix_scan_kb
 1422               	.LVL118:
 1423               		.cfi_endproc
 1424               	.LFE119:
 1426               		.section	.text.backlight_init_ports,"ax",@progbits
 1427               		.weak	backlight_init_ports
 1429               	backlight_init_ports:
 1430               	.LFB138:
 1431               		.cfi_startproc
 1432               	/* prologue: function */
 1433               	/* frame size = 0 */
 1434               	/* stack size = 0 */
 1435               	.L__stack_usage = 0
 1436               	/* epilogue start */
 1437 0000 0895      		ret
 1438               		.cfi_endproc
 1439               	.LFE138:
 1441               		.section	.text.send_nibble,"ax",@progbits
 1442               	.global	send_nibble
 1444               	send_nibble:
 1445               	.LVL119:
 1446               	.LFB125:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1447               		.loc 1 835 34 view -0
 1448               		.cfi_startproc
 1449               		.loc 1 835 34 is_stmt 0 view .LVU338
 1450 0000 CF93      		push r28
 1451               	.LCFI27:
 1452               		.cfi_def_cfa_offset 3
 1453               		.cfi_offset 28, -2
 1454               	/* prologue: function */
 1455               	/* frame size = 0 */
 1456               	/* stack size = 1 */
 1457               	.L__stack_usage = 1
 836:quantum/quantum.c ****     switch (number) {
 1458               		.loc 1 836 5 is_stmt 1 view .LVU339
 1459 0002 8A30      		cpi r24,lo8(10)
 1460 0004 00F4      		brsh .L148
 1461 0006 8823      		tst r24
 1462 0008 01F0      		breq .L153
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1463               		.loc 1 842 13 view .LVU340
 1464 000a CDE1      		ldi r28,lo8(29)
 1465               	.L156:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1466               		.loc 1 846 13 is_stmt 0 view .LVU341
 1467 000c C80F      		add r28,r24
 1468 000e 8C2F      		mov r24,r28
 1469               	.LVL120:
 1470               		.loc 1 846 13 view .LVU342
 1471 0010 0E94 0000 		call register_code
 1472               	.LVL121:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1473               		.loc 1 847 13 is_stmt 1 view .LVU343
 1474 0014 8C2F      		mov r24,r28
 1475 0016 00C0      		rjmp .L155
 1476               	.LVL122:
 1477               	.L148:
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1478               		.loc 1 846 13 is_stmt 0 view .LVU344
 1479 0018 CAEF      		ldi r28,lo8(-6)
 1480 001a 8031      		cpi r24,lo8(16)
 1481 001c 00F0      		brlo .L156
 1482               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1483               		.loc 1 850 1 view .LVU345
 1484 001e CF91      		pop r28
 1485 0020 0895      		ret
 1486               	.L153:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1487               		.loc 1 838 13 is_stmt 1 view .LVU346
 1488 0022 87E2      		ldi r24,lo8(39)
 1489               	.LVL123:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1490               		.loc 1 838 13 is_stmt 0 view .LVU347
 1491 0024 0E94 0000 		call register_code
 1492               	.LVL124:
 839:quantum/quantum.c ****             break;
 1493               		.loc 1 839 13 is_stmt 1 view .LVU348
 1494 0028 87E2      		ldi r24,lo8(39)
 1495               	.L155:
 1496               	/* epilogue start */
 1497               		.loc 1 850 1 is_stmt 0 view .LVU349
 1498 002a CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1499               		.loc 1 847 13 view .LVU350
 1500 002c 0C94 0000 		jmp unregister_code
 1501               	.LVL125:
 1502               		.cfi_endproc
 1503               	.LFE125:
 1505               		.section	.text.send_byte,"ax",@progbits
 1506               	.global	send_byte
 1508               	send_byte:
 1509               	.LVL126:
 1510               	.LFB124:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1511               		.loc 1 829 32 is_stmt 1 view -0
 1512               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1513               		.loc 1 829 32 is_stmt 0 view .LVU352
 1514 0000 CF93      		push r28
 1515               	.LCFI28:
 1516               		.cfi_def_cfa_offset 3
 1517               		.cfi_offset 28, -2
 1518               	/* prologue: function */
 1519               	/* frame size = 0 */
 1520               	/* stack size = 1 */
 1521               	.L__stack_usage = 1
 1522 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1523               		.loc 1 830 5 is_stmt 1 view .LVU353
 1524               	.LVL127:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1525               		.loc 1 831 5 view .LVU354
 1526 0004 8295      		swap r24
 1527               	.LVL128:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1528               		.loc 1 831 5 is_stmt 0 view .LVU355
 1529 0006 8F70      		andi r24,lo8(15)
 1530 0008 0E94 0000 		call send_nibble
 1531               	.LVL129:
 832:quantum/quantum.c **** }
 1532               		.loc 1 832 5 is_stmt 1 view .LVU356
 1533 000c 8C2F      		mov r24,r28
 1534 000e 8F70      		andi r24,lo8(15)
 1535               	/* epilogue start */
 833:quantum/quantum.c **** 
 1536               		.loc 1 833 1 is_stmt 0 view .LVU357
 1537 0010 CF91      		pop r28
 1538               	.LVL130:
 832:quantum/quantum.c **** }
 1539               		.loc 1 832 5 view .LVU358
 1540 0012 0C94 0000 		jmp send_nibble
 1541               	.LVL131:
 1542               		.cfi_endproc
 1543               	.LFE124:
 1545               		.section	.text.send_word,"ax",@progbits
 1546               	.global	send_word
 1548               	send_word:
 1549               	.LVL132:
 1550               	.LFB123:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1551               		.loc 1 823 33 is_stmt 1 view -0
 1552               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1553               		.loc 1 823 33 is_stmt 0 view .LVU360
 1554 0000 CF93      		push r28
 1555               	.LCFI29:
 1556               		.cfi_def_cfa_offset 3
 1557               		.cfi_offset 28, -2
 1558               	/* prologue: function */
 1559               	/* frame size = 0 */
 1560               	/* stack size = 1 */
 1561               	.L__stack_usage = 1
 1562 0002 C82F      		mov r28,r24
 824:quantum/quantum.c ****     send_byte(byte);
 1563               		.loc 1 824 5 is_stmt 1 view .LVU361
 1564               	.LVL133:
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1565               		.loc 1 825 5 view .LVU362
 1566 0004 892F      		mov r24,r25
 1567               	.LVL134:
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1568               		.loc 1 825 5 is_stmt 0 view .LVU363
 1569 0006 0E94 0000 		call send_byte
 1570               	.LVL135:
 826:quantum/quantum.c **** }
 1571               		.loc 1 826 5 is_stmt 1 view .LVU364
 1572 000a 8C2F      		mov r24,r28
 1573               	/* epilogue start */
 827:quantum/quantum.c **** 
 1574               		.loc 1 827 1 is_stmt 0 view .LVU365
 1575 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1576               		.loc 1 826 5 view .LVU366
 1577 000e 0C94 0000 		jmp send_byte
 1578               	.LVL136:
 1579               		.cfi_endproc
 1580               	.LFE123:
 1582               		.section	.text.send_dword,"ax",@progbits
 1583               	.global	send_dword
 1585               	send_dword:
 1586               	.LVL137:
 1587               	.LFB122:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1588               		.loc 1 817 34 is_stmt 1 view -0
 1589               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1590               		.loc 1 817 34 is_stmt 0 view .LVU368
 1591 0000 CF92      		push r12
 1592               	.LCFI30:
 1593               		.cfi_def_cfa_offset 3
 1594               		.cfi_offset 12, -2
 1595 0002 DF92      		push r13
 1596               	.LCFI31:
 1597               		.cfi_def_cfa_offset 4
 1598               		.cfi_offset 13, -3
 1599 0004 EF92      		push r14
 1600               	.LCFI32:
 1601               		.cfi_def_cfa_offset 5
 1602               		.cfi_offset 14, -4
 1603 0006 FF92      		push r15
 1604               	.LCFI33:
 1605               		.cfi_def_cfa_offset 6
 1606               		.cfi_offset 15, -5
 1607               	/* prologue: function */
 1608               	/* frame size = 0 */
 1609               	/* stack size = 4 */
 1610               	.L__stack_usage = 4
 1611 0008 6B01      		movw r12,r22
 818:quantum/quantum.c ****     send_word(word);
 1612               		.loc 1 818 5 is_stmt 1 view .LVU369
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1613               		.loc 1 819 5 view .LVU370
 1614 000a 0E94 0000 		call send_word
 1615               	.LVL138:
 820:quantum/quantum.c **** }
 1616               		.loc 1 820 5 view .LVU371
 1617 000e C601      		movw r24,r12
 1618               	/* epilogue start */
 821:quantum/quantum.c **** 
 1619               		.loc 1 821 1 is_stmt 0 view .LVU372
 1620 0010 FF90      		pop r15
 1621 0012 EF90      		pop r14
 1622 0014 DF90      		pop r13
 1623 0016 CF90      		pop r12
 820:quantum/quantum.c **** }
 1624               		.loc 1 820 5 view .LVU373
 1625 0018 0C94 0000 		jmp send_word
 1626               	.LVL139:
 1627               		.cfi_endproc
 1628               	.LFE122:
 1630               		.section	.text.api_send_unicode,"ax",@progbits
 1631               	.global	api_send_unicode
 1633               	api_send_unicode:
 1634               	.LVL140:
 1635               	.LFB126:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1636               		.loc 1 852 41 is_stmt 1 view -0
 1637               		.cfi_startproc
 1638               	/* prologue: function */
 1639               	/* frame size = 0 */
 1640               	/* stack size = 0 */
 1641               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1642               		.loc 1 858 1 view .LVU375
 1643               	/* epilogue start */
 1644 0000 0895      		ret
 1645               		.cfi_endproc
 1646               	.LFE126:
 1648               		.section	.text.led_set_user,"ax",@progbits
 1649               		.weak	led_set_user
 1651               	led_set_user:
 1652               	.LVL141:
 1653               	.LFB127:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1654               		.loc 1 861 36 view -0
 1655               		.cfi_startproc
 1656               	/* prologue: function */
 1657               	/* frame size = 0 */
 1658               	/* stack size = 0 */
 1659               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1660               		.loc 1 863 1 view .LVU377
 1661               	/* epilogue start */
 1662 0000 0895      		ret
 1663               		.cfi_endproc
 1664               	.LFE127:
 1666               		.set	led_set_user.localalias.1,led_set_user
 1667               		.section	.text.backlight_set,"ax",@progbits
 1668               		.weak	backlight_set
 1670               	backlight_set:
 1671               	.LFB140:
 1672               		.cfi_startproc
 1673               	/* prologue: function */
 1674               	/* frame size = 0 */
 1675               	/* stack size = 0 */
 1676               	.L__stack_usage = 0
 1677               	/* epilogue start */
 1678 0000 0895      		ret
 1679               		.cfi_endproc
 1680               	.LFE140:
 1682               		.section	.text.led_set_kb,"ax",@progbits
 1683               		.weak	led_set_kb
 1685               	led_set_kb:
 1686               	.LVL142:
 1687               	.LFB128:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1688               		.loc 1 866 34 view -0
 1689               		.cfi_startproc
 1690               	/* prologue: function */
 1691               	/* frame size = 0 */
 1692               	/* stack size = 0 */
 1693               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1694               		.loc 1 867 5 view .LVU379
 1695 0000 0C94 0000 		jmp led_set_user
 1696               	.LVL143:
 1697               		.loc 1 867 5 is_stmt 0 view .LVU380
 1698               		.cfi_endproc
 1699               	.LFE128:
 1701               		.section	.text.led_init_ports,"ax",@progbits
 1702               		.weak	led_init_ports
 1704               	led_init_ports:
 1705               	.LFB129:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1706               		.loc 1 872 1 is_stmt 1 view -0
 1707               		.cfi_startproc
 1708               	/* prologue: function */
 1709               	/* frame size = 0 */
 1710               	/* stack size = 0 */
 1711               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1712               		.loc 1 874 1 view .LVU382
 1713               	/* epilogue start */
 1714 0000 0895      		ret
 1715               		.cfi_endproc
 1716               	.LFE129:
 1718               		.section	.text.led_set,"ax",@progbits
 1719               		.weak	led_set
 1721               	led_set:
 1722               	.LVL144:
 1723               	.LFB130:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1724               		.loc 1 878 1 view -0
 1725               		.cfi_startproc
 1726               	/* prologue: function */
 1727               	/* frame size = 0 */
 1728               	/* stack size = 0 */
 1729               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1730               		.loc 1 896 3 view .LVU384
 1731 0000 0C94 0000 		jmp led_set_kb
 1732               	.LVL145:
 1733               		.loc 1 896 3 is_stmt 0 view .LVU385
 1734               		.cfi_endproc
 1735               	.LFE130:
 1737               		.section	.text.startup_user,"ax",@progbits
 1738               		.weak	startup_user
 1740               	startup_user:
 1741               	.LFB134:
 1742               		.cfi_startproc
 1743               	/* prologue: function */
 1744               	/* frame size = 0 */
 1745               	/* stack size = 0 */
 1746               	.L__stack_usage = 0
 1747               	/* epilogue start */
 1748 0000 0895      		ret
 1749               		.cfi_endproc
 1750               	.LFE134:
 1752               		.section	.text.shutdown_user,"ax",@progbits
 1753               		.weak	shutdown_user
 1755               	shutdown_user:
 1756               	.LFB136:
 1757               		.cfi_startproc
 1758               	/* prologue: function */
 1759               	/* frame size = 0 */
 1760               	/* stack size = 0 */
 1761               	.L__stack_usage = 0
 1762               	/* epilogue start */
 1763 0000 0895      		ret
 1764               		.cfi_endproc
 1765               	.LFE136:
 1767               	.global	ascii_to_qwerty_keycode_lut
 1768               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1771               	ascii_to_qwerty_keycode_lut:
 1772 0000 00        		.byte	0
 1773 0001 00        		.byte	0
 1774 0002 00        		.byte	0
 1775 0003 00        		.byte	0
 1776 0004 00        		.byte	0
 1777 0005 00        		.byte	0
 1778 0006 00        		.byte	0
 1779 0007 00        		.byte	0
 1780 0008 2A        		.byte	42
 1781 0009 2B        		.byte	43
 1782 000a 28        		.byte	40
 1783 000b 00        		.byte	0
 1784 000c 00        		.byte	0
 1785 000d 00        		.byte	0
 1786 000e 00        		.byte	0
 1787 000f 00        		.byte	0
 1788 0010 00        		.byte	0
 1789 0011 00        		.byte	0
 1790 0012 00        		.byte	0
 1791 0013 00        		.byte	0
 1792 0014 00        		.byte	0
 1793 0015 00        		.byte	0
 1794 0016 00        		.byte	0
 1795 0017 00        		.byte	0
 1796 0018 00        		.byte	0
 1797 0019 00        		.byte	0
 1798 001a 00        		.byte	0
 1799 001b 29        		.byte	41
 1800 001c 00        		.byte	0
 1801 001d 00        		.byte	0
 1802 001e 00        		.byte	0
 1803 001f 00        		.byte	0
 1804 0020 2C        		.byte	44
 1805 0021 1E        		.byte	30
 1806 0022 34        		.byte	52
 1807 0023 20        		.byte	32
 1808 0024 21        		.byte	33
 1809 0025 22        		.byte	34
 1810 0026 24        		.byte	36
 1811 0027 34        		.byte	52
 1812 0028 26        		.byte	38
 1813 0029 27        		.byte	39
 1814 002a 25        		.byte	37
 1815 002b 2E        		.byte	46
 1816 002c 36        		.byte	54
 1817 002d 2D        		.byte	45
 1818 002e 37        		.byte	55
 1819 002f 38        		.byte	56
 1820 0030 27        		.byte	39
 1821 0031 1E        		.byte	30
 1822 0032 1F        		.byte	31
 1823 0033 20        		.byte	32
 1824 0034 21        		.byte	33
 1825 0035 22        		.byte	34
 1826 0036 23        		.byte	35
 1827 0037 24        		.byte	36
 1828 0038 25        		.byte	37
 1829 0039 26        		.byte	38
 1830 003a 33        		.byte	51
 1831 003b 33        		.byte	51
 1832 003c 36        		.byte	54
 1833 003d 2E        		.byte	46
 1834 003e 37        		.byte	55
 1835 003f 38        		.byte	56
 1836 0040 1F        		.byte	31
 1837 0041 04        		.byte	4
 1838 0042 05        		.byte	5
 1839 0043 06        		.byte	6
 1840 0044 07        		.byte	7
 1841 0045 08        		.byte	8
 1842 0046 09        		.byte	9
 1843 0047 0A        		.byte	10
 1844 0048 0B        		.byte	11
 1845 0049 0C        		.byte	12
 1846 004a 0D        		.byte	13
 1847 004b 0E        		.byte	14
 1848 004c 0F        		.byte	15
 1849 004d 10        		.byte	16
 1850 004e 11        		.byte	17
 1851 004f 12        		.byte	18
 1852 0050 13        		.byte	19
 1853 0051 14        		.byte	20
 1854 0052 15        		.byte	21
 1855 0053 16        		.byte	22
 1856 0054 17        		.byte	23
 1857 0055 18        		.byte	24
 1858 0056 19        		.byte	25
 1859 0057 1A        		.byte	26
 1860 0058 1B        		.byte	27
 1861 0059 1C        		.byte	28
 1862 005a 1D        		.byte	29
 1863 005b 2F        		.byte	47
 1864 005c 31        		.byte	49
 1865 005d 30        		.byte	48
 1866 005e 23        		.byte	35
 1867 005f 2D        		.byte	45
 1868 0060 35        		.byte	53
 1869 0061 04        		.byte	4
 1870 0062 05        		.byte	5
 1871 0063 06        		.byte	6
 1872 0064 07        		.byte	7
 1873 0065 08        		.byte	8
 1874 0066 09        		.byte	9
 1875 0067 0A        		.byte	10
 1876 0068 0B        		.byte	11
 1877 0069 0C        		.byte	12
 1878 006a 0D        		.byte	13
 1879 006b 0E        		.byte	14
 1880 006c 0F        		.byte	15
 1881 006d 10        		.byte	16
 1882 006e 11        		.byte	17
 1883 006f 12        		.byte	18
 1884 0070 13        		.byte	19
 1885 0071 14        		.byte	20
 1886 0072 15        		.byte	21
 1887 0073 16        		.byte	22
 1888 0074 17        		.byte	23
 1889 0075 18        		.byte	24
 1890 0076 19        		.byte	25
 1891 0077 1A        		.byte	26
 1892 0078 1B        		.byte	27
 1893 0079 1C        		.byte	28
 1894 007a 1D        		.byte	29
 1895 007b 2F        		.byte	47
 1896 007c 31        		.byte	49
 1897 007d 30        		.byte	48
 1898 007e 35        		.byte	53
 1899 007f 4C        		.byte	76
 1900               	.global	ascii_to_qwerty_shift_lut
 1901               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1904               	ascii_to_qwerty_shift_lut:
 1905 0000 00        		.byte	0
 1906 0001 00        		.byte	0
 1907 0002 00        		.byte	0
 1908 0003 00        		.byte	0
 1909 0004 00        		.byte	0
 1910 0005 00        		.byte	0
 1911 0006 00        		.byte	0
 1912 0007 00        		.byte	0
 1913 0008 00        		.byte	0
 1914 0009 00        		.byte	0
 1915 000a 00        		.byte	0
 1916 000b 00        		.byte	0
 1917 000c 00        		.byte	0
 1918 000d 00        		.byte	0
 1919 000e 00        		.byte	0
 1920 000f 00        		.byte	0
 1921 0010 00        		.byte	0
 1922 0011 00        		.byte	0
 1923 0012 00        		.byte	0
 1924 0013 00        		.byte	0
 1925 0014 00        		.byte	0
 1926 0015 00        		.byte	0
 1927 0016 00        		.byte	0
 1928 0017 00        		.byte	0
 1929 0018 00        		.byte	0
 1930 0019 00        		.byte	0
 1931 001a 00        		.byte	0
 1932 001b 00        		.byte	0
 1933 001c 00        		.byte	0
 1934 001d 00        		.byte	0
 1935 001e 00        		.byte	0
 1936 001f 00        		.byte	0
 1937 0020 00        		.byte	0
 1938 0021 01        		.byte	1
 1939 0022 01        		.byte	1
 1940 0023 01        		.byte	1
 1941 0024 01        		.byte	1
 1942 0025 01        		.byte	1
 1943 0026 01        		.byte	1
 1944 0027 00        		.byte	0
 1945 0028 01        		.byte	1
 1946 0029 01        		.byte	1
 1947 002a 01        		.byte	1
 1948 002b 01        		.byte	1
 1949 002c 00        		.byte	0
 1950 002d 00        		.byte	0
 1951 002e 00        		.byte	0
 1952 002f 00        		.byte	0
 1953 0030 00        		.byte	0
 1954 0031 00        		.byte	0
 1955 0032 00        		.byte	0
 1956 0033 00        		.byte	0
 1957 0034 00        		.byte	0
 1958 0035 00        		.byte	0
 1959 0036 00        		.byte	0
 1960 0037 00        		.byte	0
 1961 0038 00        		.byte	0
 1962 0039 00        		.byte	0
 1963 003a 01        		.byte	1
 1964 003b 00        		.byte	0
 1965 003c 01        		.byte	1
 1966 003d 00        		.byte	0
 1967 003e 01        		.byte	1
 1968 003f 01        		.byte	1
 1969 0040 01        		.byte	1
 1970 0041 01        		.byte	1
 1971 0042 01        		.byte	1
 1972 0043 01        		.byte	1
 1973 0044 01        		.byte	1
 1974 0045 01        		.byte	1
 1975 0046 01        		.byte	1
 1976 0047 01        		.byte	1
 1977 0048 01        		.byte	1
 1978 0049 01        		.byte	1
 1979 004a 01        		.byte	1
 1980 004b 01        		.byte	1
 1981 004c 01        		.byte	1
 1982 004d 01        		.byte	1
 1983 004e 01        		.byte	1
 1984 004f 01        		.byte	1
 1985 0050 01        		.byte	1
 1986 0051 01        		.byte	1
 1987 0052 01        		.byte	1
 1988 0053 01        		.byte	1
 1989 0054 01        		.byte	1
 1990 0055 01        		.byte	1
 1991 0056 01        		.byte	1
 1992 0057 01        		.byte	1
 1993 0058 01        		.byte	1
 1994 0059 01        		.byte	1
 1995 005a 01        		.byte	1
 1996 005b 00        		.byte	0
 1997 005c 00        		.byte	0
 1998 005d 00        		.byte	0
 1999 005e 01        		.byte	1
 2000 005f 01        		.byte	1
 2001 0060 00        		.byte	0
 2002 0061 00        		.byte	0
 2003 0062 00        		.byte	0
 2004 0063 00        		.byte	0
 2005 0064 00        		.byte	0
 2006 0065 00        		.byte	0
 2007 0066 00        		.byte	0
 2008 0067 00        		.byte	0
 2009 0068 00        		.byte	0
 2010 0069 00        		.byte	0
 2011 006a 00        		.byte	0
 2012 006b 00        		.byte	0
 2013 006c 00        		.byte	0
 2014 006d 00        		.byte	0
 2015 006e 00        		.byte	0
 2016 006f 00        		.byte	0
 2017 0070 00        		.byte	0
 2018 0071 00        		.byte	0
 2019 0072 00        		.byte	0
 2020 0073 00        		.byte	0
 2021 0074 00        		.byte	0
 2022 0075 00        		.byte	0
 2023 0076 00        		.byte	0
 2024 0077 00        		.byte	0
 2025 0078 00        		.byte	0
 2026 0079 00        		.byte	0
 2027 007a 00        		.byte	0
 2028 007b 01        		.byte	1
 2029 007c 01        		.byte	1
 2030 007d 01        		.byte	1
 2031 007e 01        		.byte	1
 2032 007f 00        		.byte	0
 2033               		.section	.bss.scs_timer,"aw",@nobits
 2036               	scs_timer:
 2037 0000 0000      		.zero	2
 2038               		.section	.bss.shift_interrupted,"aw",@nobits
 2041               	shift_interrupted:
 2042 0000 0000      		.zero	2
 2043               		.text
 2044               	.Letext0:
 2045               		.file 3 "/usr/avr/include/stdint.h"
 2046               		.file 4 "/usr/lib/gcc/avr/8.2.0/include/stddef.h"
 2047               		.file 5 "./tmk_core/common/keyboard.h"
 2048               		.file 6 "./tmk_core/common/action.h"
 2049               		.file 7 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2050               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2051               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2052               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2053               		.file 11 "/usr/avr/include/stdio.h"
 2054               		.file 12 "./tmk_core/common/report.h"
 2055               		.file 13 "./tmk_core/common/host.h"
 2056               		.file 14 "./tmk_core/common/debug.h"
 2057               		.file 15 "quantum/keycode_config.h"
 2058               		.file 16 "./tmk_core/common/keycode.h"
 2059               		.file 17 "quantum/quantum_keycodes.h"
 2060               		.file 18 "quantum/keymap.h"
 2061               		.file 19 "quantum/light_ws2812.h"
 2062               		.file 20 "quantum/rgblight.h"
 2063               		.file 21 "./tmk_core/common/action_layer.h"
 2064               		.file 22 "./tmk_core/common/timer.h"
 2065               		.file 23 "./tmk_core/common/action_util.h"
 2066               		.file 24 "/usr/avr/include/stdlib.h"
 2067               		.file 25 "quantum/quantum.h"
 2068               		.file 26 "./quantum/process_keycode/process_leader.h"
 2069               		.file 27 "./tmk_core/common/eeconfig.h"
 2070               		.file 28 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccqw6FZB.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqw6FZB.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqw6FZB.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqw6FZB.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqw6FZB.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqw6FZB.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccqw6FZB.s:146    .text.register_code16:0000000000000000 register_code16
     /tmp/ccqw6FZB.s:180    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccqw6FZB.s:221    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccqw6FZB.s:243    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccqw6FZB.s:265    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccqw6FZB.s:285    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccqw6FZB.s:330    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccqw6FZB.s:2041   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccqw6FZB.s:2036   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccqw6FZB.s:971    .text.send_string:0000000000000000 send_string
     /tmp/ccqw6FZB.s:1771   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccqw6FZB.s:1904   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccqw6FZB.s:1119   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccqw6FZB.s:1260   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccqw6FZB.s:1395   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccqw6FZB.s:1412   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccqw6FZB.s:1429   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccqw6FZB.s:1444   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccqw6FZB.s:1508   .text.send_byte:0000000000000000 send_byte
     /tmp/ccqw6FZB.s:1548   .text.send_word:0000000000000000 send_word
     /tmp/ccqw6FZB.s:1585   .text.send_dword:0000000000000000 send_dword
     /tmp/ccqw6FZB.s:1633   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccqw6FZB.s:1651   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccqw6FZB.s:1651   .text.led_set_user:0000000000000000 led_set_user.localalias.1
     /tmp/ccqw6FZB.s:1670   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccqw6FZB.s:1685   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccqw6FZB.s:1704   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccqw6FZB.s:1721   .text.led_set:0000000000000000 led_set
     /tmp/ccqw6FZB.s:1740   .text.startup_user:0000000000000000 startup_user
     /tmp/ccqw6FZB.s:1755   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_leader
read_source_layers_cache
rgblight_step
rgblight_decrease_sat
timer_read
debug_config
rgblight_toggle
rgblight_increase_hue
rgblight_decrease_hue
rgblight_increase_sat
rgblight_increase_val
rgblight_decrease_val
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
